import os
import sys
import csv
import hashlib
import argparse
import subprocess
import shutil


def PathUpdate(args):

    # Define Path to SingularityCore Python Package 
    args.SingularityCorePath = '/'.join(os.path.abspath(__file__).split('/')[:-2]) + '/'
       

    # Define Path where Singularity SIF containers will be stored.
    args.SingularitySIFCore = os.path.expanduser("~") + '/' + '.SingularitySIFCore'


    # Check to see if SingularitySIFCore has been created at root
    # which will contain all SIF files. If not create the directory
    if not os.path.isdir(args.SingularitySIFCore):
        print(f'SingularityCore: Creating {args.SingularitySIFCore} to house containers\n')
        os.makedirs(args.SingularitySIFCore)
    else:
        print(f'SingularityCore: {args.SingularitySIFCore} Exists\n')

    # Obtain list of containers in library
    args.ContainerList = os.listdir(args.SingularityCorePath+'/library')



def Install(args):
    """
    Function to Install Singularity Containers 
    Using pre-defined .def files.
    """

    
    
    # Determine Containers To Install
    if args.AliasList != False:
        ContainersToParse = args.AliasList.split()
    elif args.All == True:
        ContainersToParse = args.ContainerList
    else:
        ContainersToParse = []

    # Loop Over Alias
    for Alias in ContainersToParse:

        # Check if Container Exists in Working Directory
        if os.path.isfile(f'{args.SingularitySIFCore}/{Alias}.sif'):
            print(f'SingularityCore: Container pre-built: {Alias}')
            continue

        # Raise Error if Alias Missing in ContainerList
        if Alias not in args.ContainerList:
            print(f'SingularityCore Error: missing alias in library : ({Alias})')
            sys.exit()

        # Raise Error if Alias Missing in library
        if os.path.isfile(f'{args.SingularityCorePath}/library/{Alias}/{Alias}.def') == False:
            print(f'SingularityCore: Error: missing container defintion file: ({Alias})')
            sys.exit()

        
        # Create Singularity Container
        CSF = f'''cd {args.SingularityCorePath}/library/{Alias}; \
        singularity build --fakeroot {args.SingularitySIFCore}/{Alias}.sif ./{Alias}.def'''

        subprocess.run(CSF,shell=True)

        
    return True


# Placeholder Function to Expand Script
def AddContainer(args):

    # Standardise Path
    if '/' != args.DirectoryPath[-1]:
        args.DirectoryPath+='/'

    # Obtain list of files in Directory Path
    # Excluding any existing .sif files
    FOI = [F for F in os.listdir(args.DirectoryPath) if '.sif' not in F.lower()] 

    # Check if .def file present in directory
    DefFile = [F for F in FOI if '.def' in F]
    if len(DefFile)!=0:
        print(f'SingularityCore Error: No single .def file found in {args.DirectoryPath}')
        sys.exit()

    # Check if .def file name unique
    DefFile = DefFile[0]
    ContainerName = DefFile.replace('.def','')
    if ContainerName in args.ContainerList:
        print(f'SingularityCore Error: .def name not unique: {ContainerName}')
        sys.exit()

    # Create Library
    os.makedirs(args.SingularityCorePath+f'/library/{ContainerName}')

    # Copy over all supporting files
    for F in FOI:
        shutil.copy(args.DirectoryPath+F, 
                    args.SingularityCorePath+f'/library/{ContainerName}/{F}')












#################################################################################
#################################################################################
#################################################################################


# Create the main parser
parser = argparse.ArgumentParser(description="A script with three subcommands")

# Create subparsers for each function
subparsers = parser.add_subparsers(title="Subcommands", dest="subcommand")

# (1) Subparser for Install Function 
parser_function1 = subparsers.add_parser("Install", help="Create singularity containers from library")
parser_function1.add_argument("--AliasList",default=False,help="List of Container Alias to Install")
parser_function1.add_argument('--All',help='Install all Container Alias in SIF Directory',action='store_true')

# (2) Subparser for Add Function
parser_function2 = subparsers.add_parser("Add", help="Add singularity container to library")
parser_function2.add_argument("--DirectoryPath", help="Path to directory which contains all necessary files")


# Parse the command-line arguments
args = parser.parse_args()

# Add neccessary paths to args class.
PathUpdate(args)

# Call the appropriate function based on the subcommand
if args.subcommand == "Install":
    Install(args)

elif args.subcommand == "Add":
    AddContainer(args)

else:
    print("No subcommand provided. Use -h for help.")
